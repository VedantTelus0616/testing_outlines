[{"L3": "Code synthesis", "Level": "high school student", "Questions": "1. Question: How can you use C# to create a conditional statement that checks if a user's Azure Storage account balance is below a certain threshold and sends an alert email using Azure Functions?\n```csharp\nusing System;\nusing Microsoft.Azure.WebJobs;\nusing Microsoft.Extensions.Logging;\nusing SendGrid;\nusing SendGrid.Helpers.Mail;\n\npublic static class StorageBalanceChecker\n{\n    [FunctionName(\"CheckStorageBalance\")]\n    public static void Run([TimerTrigger(\"0 0 * * * *\")]TimerInfo myTimer, ILogger log)\n    {\n        var storageBalance = GetStorageBalance(); // Assume this function fetches the balance\n        const double threshold = 10.0; // Threshold in dollars\n\n        if (storageBalance < threshold)\n        {\n            log.LogInformation(\"Storage balance is below the threshold. Sending alert email.\");\n\n            var apiKey = Environment.GetEnvironmentVariable(\"SENDGRID_API_KEY\");\n            var client = new SendGridClient(apiKey);\n            var from = new EmailAddress(\"sender@example.com\");\n            var to = new EmailAddress(\"user@example.com\");\n            var subject = \"Azure Storage Balance Alert\";\n            var body = $\"Your storage balance is low. Current balance: {storageBalance} USD.\";\n            var message = MailHelper.CreateSingleEmail(from, to, subject, body, body);\n\n            client.SendEmailAsync(message);\n        }\n        else\n        {\n            log.LogInformation(\"Storage balance is within the threshold.\");\n        }\n    }\n}\n```\nExplanation: This code defines an Azure Function called \"CheckStorageBalance\" that runs on a schedule (every hour, in this case). It checks the user's Azure Storage balance and sends an email alert if the balance falls below a specified threshold. The `if` statement is the conditional control used to determine whether to send the email or not.\n\n2. Question: How can you use C# to implement nested ternary operators in an Azure IoT Edge module to control the temperature of a device based on messages received from Azure IoT Hub?\n```csharp\nusing System;\nusing Microsoft.Azure.Devices.Routing.Core;\n\npublic class TemperatureController\n{\n    public string RouteMessage(string message)\n    {\n        double temperature = double.Parse(message[\"temperature\"]);\n        bool isProduction = bool.Parse(message[\"isProduction\"]);\n\n        string route = isProduction\n            ? (temperature > 30 ? \"HotProduction\" : \"NominalProduction\")\n            : (temperature > 30 ? \"HotTest\" : \"NominalTest\");\n\n        return route;\n    }\n}\n```\nExplanation: This code defines a method `RouteMessage` that receives IoT messages and decides which IoT Hub endpoint to route the message based on the device's temperature and whether it's in production mode. The nested ternary operators act as a shorthand for conditional control, determining the appropriate route based on the given conditions.\n\n3. Question: How can you use C# and the Azure Cognitive Services Text Analytics API to conditionally classify sentiment in customer reviews and store the result in Azure Cosmos DB?\n```csharp\nusing System;\nusing System.Threading.Tasks;\nusing Microsoft.Azure.CognitiveServices.Language.TextAnalytics;\nusing Microsoft.Azure.CognitiveServices.Language.TextAnalytics.Models;\nusing Microsoft.Azure.Documents.Client;\n\npublic class SentimentClassifier\n{\n    private readonly TextAnalyticsClient _textAnalyticsClient;\n    private readonly Uri _cosmosDbEndpoint;\n    private readonly string _cosmosDbKey;\n\n    public SentimentClassifier(string textAnalyticsKey, string cosmosDbEndpoint, string cosmosDbKey)\n    {\n        _textAnalyticsClient = new TextAnalyticsClient(new ApiKeyServiceClientCredentials(textAnalyticsKey));\n        _cosmosDbEndpoint = new Uri(cosmosDbEndpoint);\n        _cosmosDbKey = cosmosDbKey;\n    }\n\n    public async Task ClassifyAndStoreReview(string review)\n    {\n        var sentiment = await _textAnalyticsClient.SentimentAsync(new MultiLanguageBatchInput(\n            new[]\n            {\n                new MultiLanguageInput(\"en\", \"1\", review)\n            }));\n\n        var sentimentScore = sentiment.Documents[0].Score;\n\n        using (var client = new DocumentClient(_cosmosDbEndpoint, _cosmosDbKey))\n        {\n            var document = new\n```", "Language": "C#", "Context": "Microsoft Azure", "Programming_Concept": "Conditions Control"}]