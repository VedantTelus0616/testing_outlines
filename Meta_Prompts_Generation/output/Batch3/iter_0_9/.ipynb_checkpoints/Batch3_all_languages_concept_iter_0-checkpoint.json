[{"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Code synthesis", "Complexity_Level": "medium", "Response": "Domain: Programming Language Concepts\nSub Area: Code Synthesis\n\n**Problem 1**\nGiven a set of input parameters, synthesize a function in Python that calculates the factorial of a non-negative integer using recursion.\n\n**Question:**\nCreate a Python function named `factorial` that takes an integer `n` as input and returns the factorial of `n`. The function must handle edge cases where `n` is 0 or a negative integer, returning an appropriate error message.\n\n**Solution:**\n```python\ndef factorial(n):\n    if not isinstance(n, int):\n        return \"Error: Input must be an integer.\"\n    if n < 0:\n        return \"Error: Factorial is undefined for negative integers.\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n# Test cases\nprint(factorial(5))  # Expected output: 120\nprint(factorial(0))  # Expected output: 1\nprint(factorial(-3))  # Expected output: \"Error: Factorial is undefined for negative integers.\"\nprint(factorial(\"abc\"))  # Expected output: \"Error: Input must be an integer.\"\n```\n**Problem 2**\nGenerate a JavaScript function that takes an array of numbers and returns the sum of all even numbers. If the input is not an array or contains non-numeric elements, the function should throw an error.\n\n**Question:**\nWrite a JavaScript function named `sumEvenNumbers` that takes an array `arr` as input and returns the sum of all even numbers in the array. If the input is not an array or contains non-numeric elements, throw a custom error message.\n\n**Solution:**\n```javascript\nfunction sumEvenNumbers(arr) {\n  if (!Array.isArray(arr)) {\n    throw new Error(\"Input must be an array.\");\n  }\n\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (typeof arr[i] !== 'number') {\n      throw new Error(\"Array should only contain numbers.\");\n    }\n    if (arr[i] % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\n// Test cases\nconsole.log(sumEvenNumbers([1, 2, 3, 4, 5, 6]));  // Expected output: 12\nconsole.log(sumEvenNumbers([0, 2, 4, 6, 8]));  // Expected output: 20\ntry {\n  console.log(sumEvenNumbers(\"not an array\"));\n} catch (error) {\n  console.error(error.message);  // Expected output: \"Input must be an array.\"\n}\n\ntry {\n  console.log(sumEvenNumbers([1, 2, \"three\", 4, 5]));\n} catch (error) {\n  console.error(error.message);  // Expected output: \"Array should only contain numbers.\"\n}\n```\nConcept: Code Synthesis"}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Code synthesis", "Complexity_Level": "extremely difficult", "Response": "Domain: Programming Language Concepts\nConcept: Code Synthesis\n\nQuestion 1: Develop an AI system that can synthesize a complete, efficient, and scalable solution for a complex graph problem, such as finding the shortest path using Dijkstra's algorithm, given a high-level textual description of the problem.\n\nProblem:\n Implement a program in Python that reads a text description of a weighted graph problem, where the text includes vertices, edges, and their corresponding weights. The program should then generate the optimal Dijkstra's algorithm code to find the shortest path from a specified source vertex to all other vertices.\n\nSolution:\n```python\nimport re\nfrom collections import defaultdict\n\ndef parse_graph(description):\n    graph = defaultdict(list)\n    edge_pattern = re.compile(r'(\\w+) (\\w+) (\\d+)')\n    for line in description.split('\\n'):\n        match = edge_pattern.match(line)\n        if match:\n            u, v, w = match.groups()\n            graph[u].append((v, int(w)))\n    return graph\n\ndef generate_dijkstra_code(graph, source):\n    code = f\"def dijkstra(graph, start):\\n\"\n    code += f\"    vertices = set(graph.keys())\\n\"\n    code += f\"    distances = {dict.fromkeys(graph.keys(), float('inf'))}\\n\"\n    code += f\"    distances[start] = 0\\n\"\n    code += f\"    current_vertex = None\\n\\n\"\n    code += f\"    while vertices:\\n\"\n    code += f\"        current_vertex = min(vertices, key=distances.get)\\n\"\n    code += f\"        vertices.remove(current_vertex)\\n\\n\"\n    code += f\"        for neighbor, weight in graph[current_vertex]:\\n\"\n    code += f\"            alt_distance = distances[current_vertex] + weight\\n\"\n    code += f\"            if alt_distance < distances[neighbor]:\\n\"\n    code += f\"                distances[neighbor] = alt_distance\\n\"\n    code += f\"    return distances\\n\"\n    \n    return code, graph, source\n\ndescription = \"\"\"\nA B 5\nA C 3\nB D 1\nB E 4\nC D 2\nC E 6\nD F 7\nE F 8\n\"\"\"\n\ngraph = parse_graph(description)\ncode, _, source = generate_dijkstra_code(graph, 'A')\n\nprint(\"Generated Code:\")\nprint(code)\n```\nNote: This code only generates the Dijkstra's algorithm function based on the input graph description. It doesn't execute the generated code.\n\nQuestion 2: Create a system that can synthesize a program in Java to perform matrix multiplication given a description of the matrices' dimensions and elements.\n\nProblem:\nGiven a textual description of two matrices, the system should generate a Java program to perform matrix multiplication. The description will include the dimensions (MxN and NxP) and the elements of each matrix.\n\nSolution:\n```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class MatrixMultiplicationGenerator {\n\n    public static void main(String[] args) {\n        String matrix1Description = \"2x3: 1 2 3 4 5 6\";\n        String matrix2Description = \"3x4: 7 8 9 10 11 12 13 14 15 16 17 18\";\n\n        List<List<Integer>> matrix1 = parseMatrix(matrix1Description);\n        List<List<Integer>> matrix2 = parseMatrix(matrix2Description);\n\n        String generatedCode = generateMatrixMultiplicationCode(matrix1, matrix2);\n        System.out.println(\"Generated Code:\");\n        System.out.println(generatedCode);\n    }\n\n    private static List<List<Integer>> parseMatrix(String description) {\n        int dimensionsIndex = description.indexOf(':') + 1;\n        String[] parts = description.substring(dimensionsIndex).split(\"\\\\s+\");\n        int rows = Integer.parseInt(parts[0]), cols = Integer.parseInt(parts[1]);\n\n        List<List<Integer>> matrix = new ArrayList<>();\n        for (int i = 0; i < rows; i++) {\n            matrix.add(Arrays.stream(parts, 2 + i * cols, 2 + (i + 1) * cols)\n                    .map(Integer::parseInt)\n                    .collect(Collectors.toList()));\n        }\n        return matrix;\n    }\n\n    private static String generateMatrixMultiplicationCode(List<List<Integer>> m1, List<List<Integer>> m2) {\n        int M = m1.size(), N = m2.get(0).size(), P = m2.size();\n        StringBuilder code = new StringBuilder();\n        code.append(\"public class MatrixMultiplication {\\n\");\n        code.append(\"    public static int[][] multiply(int[][] m1, int[][] m2) {\\n\");\n        code.append(\"        int M = m1.length, N = m1[0].length, P = m2[0].length;\\n\");\n        code.append(\"        int[][] result = new int[M][P];\\n\\n\");\n        code.append(\"        for (int i = 0; i < M; i++) {\\n\");\n        code.append(\"            for (int j = 0; j < P; j++) {\\n\");\n        code.append(\"                for (int k = 0; k < N; k++) {\\n\");\n        code.append(\"                    result[i][j] += m1[i][k] * m2[k][j];\\n\");\n        code.append(\"                }\\n\");\n        code.append(\"            }\\n\");\n        code.append(\"        }\\n\\n\");\n        code.append(\"        return result;\\n\");\n        code.append(\"    }\\n}\\n\");\n\n        return code.toString();\n    }\n}\n```\nNote: This code parses the matrix descriptions, generates the matrix multiplication function in Java, and prints the generated code but does not compile or execute it."}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Code retreival", "Complexity_Level": "medium", "Response": "Area: Code generation (e.g., Text to Code)\nSub Area: Code retrieval\n\nQuestion 1:\nGiven a database containing user-defined functions in various programming languages, develop a system that can retrieve and display the code snippet for a specific function by its name and language.\n\nProblem: Implement a function `search_function_code` in Python that takes a function name and a programming language as input and returns the corresponding code snippet from a dictionary storing user-defined functions.\n\n```python\ndef search_function_code(function_name, language):\n    function_database = {\n        \"Python\": {\n            \"add\": \"def add(a, b):\\n    return a + b\",\n            \"hello_world\": \"def hello_world():\\n    print('Hello, World!')\"\n        },\n        \"Java\": {\n            \"add\": \"public int add(int a, int b) {\\n    return a + b;\\n}\",\n            \"hello_world\": \"public class HelloWorld {\\n    public static void main(String[] args) {\\n        System.out.println(\\\"Hello, World!\\\");\\n    }\\n}\"\n        },\n        # ... (more languages and functions)\n    }\n\n    if language in function_database:\n        if function_name in function_database[language]:\n            return function_database[language][function_name]\n    return \"Function not found in the specified language.\"\n\n# Example usage\ncode_snippet = search_function_code(\"add\", \"Python\")\nprint(code_snippet)  # Output: def add(a, b):\\n    return a + b\n```\n\nQuestion 2:\nDesign a web API in Node.js using Express that allows clients to search for code snippets based on a given keyword and programming language.\n\n```javascript\nconst express = require('express');\nconst app = express();\n\nconst codeDatabase = {\n  // ... (similar structure as the Python example)\n};\n\napp.use(express.json());\n\napp.get('/api/code-snippets', (req, res) => {\n  const { keyword, language } = req.query;\n\n  let matching_snippets = [];\n  if (language in codeDatabase) {\n    for (let func_name in codeDatabase[language]) {\n      if (codeDatabase[language][func_name].includes(keyword)) {\n        matching_snippets.push({ func_name, code: codeDatabase[language][func_name] });\n      }\n    }\n  }\n\n  res.json(matching_snippets);\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\nExample request and response:\n```\ncurl -X GET \"http://localhost:3000/api/code-snippets?keyword=print&language=Python\"\n[\n  {\n    \"func_name\": \"hello_world\",\n    \"code\": \"def hello_world():\\n    print('Hello, World!')\"\n  }\n]\n```"}]