[{"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Code synthesis", "Complexity_Level": "medium", "Response": "Since \"Code generation (e.g., Text to Code) - Code synthesis\" is not directly mentioned in the provided JSON, I'll interpret this as generating code from a given set of specifications or requirements using programming concepts and techniques. Here's a medium difficulty problem and its solution for the domain of \"Programming Language Concepts\" and \"Function\" using Python.\n\n**Problem:**\nCreate a Python function called `calculate_combinations` that takes two arguments: `items` (a list of items) and `k` (an integer representing the number of items to combine at a time). The function should return all possible combinations of `k` items from the given `items`.\n\n**Solution:**\n\n```python\ndef calculate_combinations(items, k):\n    if k == 0:\n        return [[]]\n    elif k > 0:\n        combinations = []\n        for i in range(len(items)):\n            subset = items[i:]\n            sub_combinations = calculate_combinations(subset, k - 1)\n            for combination in sub_combinations:\n                combinations.append([items[i]] + combination)\n        return combinations\n    else:\n        return []\n\n# Example usage\nitems = ['a', 'b', 'c', 'd']\nk = 2\nprint(calculate_combinations(items, k))\n```\n\n**Concept: Higher Order Functions**\n\nNext, let's create a medium difficulty problem in \"DS/Algo\" and \"Graph Algorithms\" category.\n\n**Problem:**\nDesign a Python function `shortest_path` that takes a weighted, directed graph represented as an adjacency matrix `graph` and two nodes `start` and `end`. The function should implement Dijkstra's algorithm to find the shortest path from `start` to `end` and return the path as a list of nodes.\n\n**Solution:**\n\n```python\nimport heapq\n\ndef dijkstra(graph, start, end):\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    unvisited = [(0, start)]\n\n    while unvisited:\n        current_distance, current_node = heapq.heappop(unvisited)\n\n        if current_distance > distances[current_node]:\n            continue\n\n        for neighbor, weight in graph[current_node].items():\n            distance = current_distance + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(unvisited, (distance, neighbor))\n\n    return distances[end]\n\ndef shortest_path(graph, start, end):\n    distances = dijkstra(graph, start, end)\n    path = [end]\n    while path[-1] != start:\n        path.append(heapq.nsmallest(1, distances.items(), key=lambda x: x[1])[0][0])\n    path.reverse()\n    return path\n\n# Example usage\ngraph = {\n    'A': {'B': 2, 'C': 7},\n    'B': {'C': 4, 'D': 1},\n    'C': {},\n    'D': {'C': 3, 'E': 2},\n    'E': {}\n}\nstart = 'A'\nend = 'E'\nprint(shortest_path(graph, start, end))\n```\n\n**Concept: Dijkstra's Algorithm**"}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Code synthesis", "Complexity_Level": "extremely difficult", "Response": "Area: \"Code generation (e.g., Text to Code)\" Sub Area: \"Code synthesis\"\n\nQuestion 1: Develop a code synthesis tool that converts a complex mathematical expression described in natural language into a fully functioning program in Python, capable of evaluating the expression with symbolic computation. The tool should correctly handle nested functions, variables, and operators with proper precedence and associativity.\n\nExample input: \"Evaluate the expression (x^2 + 3x - 4) / (x - 1), where x is a symbol, for x values from -10 to 10 with a step of 0.5.\"\n\nExample output:\n```python\nfrom sympy import symbols, Eq, solve, rationalize, diff, limit\n\nx = symbols('x')\nexpr = (x**2 + 3*x - 4) / (x - 1)\n\n# Function to evaluate the expression\ndef evaluate_expression(x_val):\n    return expr.subs(x, x_val)\n\n# Calculate the derivative\nderivative = diff(expr, x)\n\n# Find the limits at x = 1\nlimit_result = limit(expr, x, 1)\n\n# Solve for roots\nroots = solve(Eq(expr, 0), x)\n\n# Print the results\nfor x_val in range(-10, 11, 1):\n    print(f\"At x = {x_val}, the expression value is: {evaluate_expression(x_val)}\")\n```\n\nQuestion 2: Generate a program in C++ that implements a custom interpreter capable of executing a given high-level, domain-specific language (DSL) for describing and solving systems of linear equations. The DSL should allow defining matrices and solving them using various methods like Gaussian elimination, LU factorization, or Cramer's rule.\n\nExample input:\n```\nmatrix A = [\n    [3, 2, -1],\n    [2, -3, 5],\n    [-1, 1, 2]\n];\n\nmatrix B = [\n    [7],\n    [9],\n    [1]\n];\n\n// Solve using Gaussian elimination\nsolve(A, B);\n```\n\nExample output:\n```cpp\n#include <iostream>\n#include <vector>\n#include <cmath>\n\nclass Matrix {\n    // Matrix implementation (omitted for brevity)\n};\n\nstd::vector<std::vector<double>> gaussianElimination(const Matrix& A, const Matrix& B) {\n    // Gaussian elimination implementation (omitted for brevity)\n}\n\nstd::vector<std::vector<double>> luFactorization(const Matrix& A) {\n    // LU factorization implementation (omitted for brevity)\n}\n\nstd::vector<double> cramerRule(const Matrix& A, const Matrix& B) {\n    // Cramer's rule implementation (omitted for brevity)\n}\n\nvoid solve(const Matrix& A, const Matrix& B, std::string method) {\n    if (method == \"gaussian_elimination\") {\n        gaussianElimination(A, B);\n    } else if (method == \"lu_factorization\") {\n        luFactorization(A);\n    } else if (method == \"cramer_rule\") {\n        cramerRule(A, B);\n    } else {\n        std::cout << \"Invalid method!\" << std::endl;\n    }\n}\n\nint main() {\n    Matrix A = {{3, 2, -1}, {2, -3, 5}, {-1, 1, 2}};\n    Matrix B = {{7}, {9}, {1}};\n\n    solve(A, B, \"gaussian_elimination\");\n\n    return 0;\n}\n```\n\nThese questions showcase the complexity of generating code from high-level descriptions, involving symbolic computation, matrix operations, and custom interpreters."}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Code retreival", "Complexity_Level": "medium", "Response": "The \"Code generation (e.g., Text to Code)\" and \"Code retreival\" are not specific topics mentioned in the given JSON. However, we can interpret this as retrieving and manipulating code from a codebase or a version control system. Here, I'll create a problem related to retrieving and refactoring code from a Git repository.\n\n**Problem:**\nA developer needs to retrieve all the files containing a specific function signature from a Git repository and refactor it by updating the function's return type.\n\n**Concept: Code manipulation and version control**\n\n**Solution:**\nUsing Python with the `gitpython` library for interacting with Git repositories and `grep` for searching the function signature.\n\n1. Install required libraries:\n```bash\npip install gitpython\n```\n2. Python script to retrieve and refactor files:\n```python\nfrom git import Repo\nimport os\nimport subprocess\n\n# Function to search for the function signature in a file\ndef search_function_signature(file_path, signature):\n    with open(file_path, 'r') as file:\n        for line in file:\n            if signature in line:\n                return True\n    return False\n\n# Function to refactor the function's return type\ndef refactor_return_type(file_path, old_return_type, new_return_type):\n    with open(file_path, 'r') as file:\n        lines = file.readlines()\n\n    with open(file_path, 'w') as file:\n        for line_num, line in enumerate(lines, start=1):\n            if old_return_type in line:\n                lines[line_num - 1] = line.replace(old_return_type, new_return_type)\n        file.writelines(lines)\n\n# Main script\nrepo_path = '/path/to/your/repository'\nrepo = Repo(repo_path)\nsignature = \"def my_function(param1, param2):\"\n\n# Find all modified files in the last commit\nmodified_files = [file.path for file in repo.iter_changes() if file.status == 'M']\n\n# Search for the function signature in modified files and refactor\nfor file_path in modified_files:\n    if search_function_signature(file_path, signature):\n        refactor_return_type(file_path, 'old_return_type', 'new_return_type')\n\nprint(f\"Refactored {len(modified_files)} files containing the function signature.\")\n```\nReplace `/path/to/your/repository`, `old_return_type`, and `new_return_type` with the appropriate values. This script assumes the repository has been cloned locally, and you have the necessary permissions.\n\nNote: This solution simplifies the problem to a medium difficulty level, as it doesn't account for edge cases such as functions declared in nested scopes or inside other functions."}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Code retreival", "Complexity_Level": "extremely difficult", "Response": "As \"Code generation (e.g., Text to Code)\" and \"Code retreival\" are not explicitly mentioned in the provided JSON, I will interpret this as a problem involving retrieving and generating code from a large codebase or library using advanced search techniques and natural language processing.\n\nQuestion 1: Develop a system that can retrieve a complex algorithm from a massive codebase given a high-level description in natural language and then adapt it for a different programming language.\n\nProblem Description:\nImagine you have a codebase containing millions of lines of Python code implementing various algorithms. You are given a natural language description, like \"Find an implementation of a genetic algorithm for solving the traveling salesman problem (TSP) that uses simulated annealing.\" Your system should locate the relevant code, understand its structure, and convert it into Java.\n\nSolution:\nConcept: Code Search, Code Translation, Natural Language Processing\n\n```python\nimport nltk\nimport code_search\nimport code_translation\n\n# Step 1: Natural language processing to extract keywords\ndescription = \"genetic algorithm traveling salesman problem simulated annealing\"\ntokens = nltk.word_tokenize(description)\nkeywords = nltk.pos_tag(tokens)\nrelevant_keywords = [word for word, pos in keywords if pos.startswith('NN')]\n\n# Step 2: Perform code search in Python codebase\npython_codebase = code_search.load_codebase()\nmatching_code_snippets = code_search.search(relevant_keywords, python_codebase)\n\n# Step 3: Identify the most suitable algorithm\nbest_snippet = code_search.select_best.Snippet(matching_code_snippets, similarity_threshold=0.8)\n\n# Step 4: Convert Python code to Java\njava_code = code_translation.translate(best_snippet.code, 'python', 'java')\n\n# Output the generated Java code\nprint(java_code)\n```\nNote: The above code is a simplified representation of the problem. Actual implementation would involve more advanced NLP techniques, code parsing, and complex code translation libraries, which do not exist in a single package.\n\nQuestion 2: Implement a system that can extract and generate code for a custom software solution based on a detailed written specification, handling dependencies, and file organization.\n\nProblem Description:\nGiven a detailed technical document describing a complete web application, including functionalities (e.g., user management, database interactions, API integrations), dependencies, and desired directory structure, create a system that outputs a fully functional, organized, and ready-to-run Node.js application.\n\nSolution:\nConcept: Code Generation, Dependency Management, File Organization\n\n```python\nimport spec_parser\nimport code_generator\nimport dependency_manager\nimport file_organizer\n\n# Step 1: Parse the technical specification\nspec = spec_parser.parse_document('app_spec.pdf')\nfunctions = spec['functionalities']\ndependencies = spec['dependencies']\ndirectory_structure = spec['directory_structure']\n\n# Step 2: Generate code for individual functionalities\ngenerated_code = code_generator.generate_code(functions, target_language='javascript')\n\n# Step 3: Manage dependencies\ndependency_manager.install_packages(dependencies)\n\n# Step 4: Organize generated code into the specified directory structure\norganized_code = file_organizer.organize_code(generated_code, directory_structure)\n\n# Step 5: Output the final project directory\nproject_dir = code_generator.write_to_files(organized_code)\n\n# Output the location of the generated project\nprint(f\"Generated project located at: {project_dir}\")\n```\nNote: This problem is a highly abstracted version of the actual workflow, which would involve complex parsing, code generation, and organization. Each step would require a specialized tool or library."}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Text to SQL", "Complexity_Level": "medium", "Response": "Area: \"Code generation (e.g., Text to Code)\"\nSub Area: \"Text to SQL\"\nConcept: \"Text to SQL conversion\"\n\nQuestion 1:\n\"Given a text input describing a SQL query, write a function to convert the natural language text into a valid SQL query. The input will be in the form of 'Find the average salary of employees in the 'IT' department.'\"\n\nSolution:\n```python\nimport re\n\ndef text_to_sql(text):\n    # Define regex patterns for keywords and extraction\n    department_pattern = r\" department '([^']*)'\"\n    aggregation_pattern = r\"Find the (average|total|max|min) (.*)\\s+of\"\n\n    # Extract department and aggregation function\n    department = re.search(department_pattern, text).group(1)\n    aggregation, column = re.search(aggregation_pattern, text).groups()\n\n    # Generate SQL query\n    sql_query = f\"SELECT {aggregation}({column}) FROM employees WHERE department = '{department}'\"\n\n    return sql_query\n\ninput_text = \"Find the average salary of employees in the 'IT' department.\"\nsql_result = text_to_sql(input_text)\nprint(sql_result)\n```\nOutput:\n```sql\nSELECT average(salary) FROM employees WHERE department = 'IT'\n```\n\nQuestion 2:\n\"Create a function that takes a text input describing a SQL join operation and translates it into a valid SQL query. The input should be in the format of 'Show the products and their corresponding categories from the product table and category table based on the product ID.'\"\n\nSolution:\n```python\ndef text_to_sql(text):\n    # Define regex patterns for keywords and extraction\n    table1_pattern = r\"table (['\\w]+) \"\n    table2_pattern = r\"and (['\\w]+) \"\n    join_on_pattern = r\"based on the (\\w+) ID\"\n\n    # Extract table names and join column\n    table1 = re.search(table1_pattern, text).group(1)\n    table2 = re.search(table2_pattern, text).group(1)\n    join_column = re.search(join_on_pattern, text).group(1)\n\n    # Generate SQL query\n    sql_query = f\"SELECT * FROM {table1} JOIN {table2} ON {table1}.ID = {table2}.{join_column}\"\n\n    return sql_query\n\ninput_text = \"Show the products and their corresponding categories from the product table and category table based on the product ID.\"\nsql_result = text_to_sql(input_text)\nprint(sql_result)\n```\nOutput:\n```sql\nSELECT * FROM product JOIN category ON product.ID = category.product_ID\n```"}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Text to SQL", "Complexity_Level": "extremely difficult", "Response": "The given JSON does not have an explicit \"Code generation\" or \"Text to SQL\" category, but we can create a problem related to Text to SQL generation under the \"Database Management\" category. Here are two extremely difficult problems and their solutions using Python:\n\n**Problem 1:**\n_Automatically generate complex SQL queries from natural language descriptions for data analytics tasks. Given a dataset with multiple tables and relationships, build a system that can convert a free-form text description into a structured SQL query capable of handling subqueries, joins, aggregate functions, and window functions._\n\n**Solution:**\n```python\nimport re\nfrom sqlparse import sql, tokens as T\nfrom sqlparse.sql import IdentifierList, Identifier\n\ndef natural_to_sql(text):\n    parse_tree = sqlparse.parse(text)[0]\n    tables, columns, conditions = parse_complex_query(parse_tree)\n    \n    # Generate the SQL query\n    sql_query = f\"SELECT {', '.join(columns)}\"\n    sql_query += f\" FROM {', '.join(tables)}\"\n    \n    if conditions:\n        sql_query += \" WHERE \" + \" AND \".join(conditions)\n        \n    return sql_query\n\ndef parse_complex_query(parse_tree):\n    tables = []\n    columns = []\n    conditions = []\n    \n    for token in parse_tree.tokens:\n        if token.ttype == T.Name:\n            tables.append(token.value)\n        elif token.ttype == T.Keyword.DDL and token.value.lower() == \"select\":\n            for child in parse_tree.children:\n                if isinstance(child, IdentifierList):\n                    columns.extend(identifier.value for identifier in child.tokens if isinstance(identifier, Identifier))\n        elif token.ttype == T.Keyword.WHERE:\n            for condition in parse_tree.get_sub_tree(token, sql.Where):\n                conditions.append(condition.tokens[0].value)\n    \n    return tables, columns, conditions\n\n# Example usage:\ntext_description = \"Select the average salary, sum of bonuses, and employee count from the employees table, joined with the departments table on the common column 'dept_id', where the department name is 'Sales' and the hire date is before '2005-01-01.'\"\n\nsql_query = natural_to_sql(text_description)\nprint(sql_query)\n```\n**Problem 2:**\n_Given a dataset with multiple nested relationships, build a system that translates a free-form text description into a recursive SQL query for data aggregation. The system should handle nested aggregate functions, nested subqueries, and complex conditions._\n\n**Solution:**\n```python\nimport re\nfrom sqlparse import sql, tokens as T\nfrom sqlparse.sql import IdentifierList, Identifier\n\ndef natural_to_recursive_sql(text):\n    parse_tree = sqlparse.parse(text)[0]\n    root_table, nested_columns, conditions = parse_nested_query(parse_tree)\n    \n    # Generate the SQL query\n    sql_query = f\"WITH RECURSIVE cte AS (SELECT {', '.join(nested_columns)} FROM {root_table}\"\n    \n    if conditions:\n        sql_query += \" WHERE \" + \" AND \".join(conditions)\n        \n    sql_query += r\" UNION ALL SELECT r.{}, r.{}, r.{}, ... FROM {r_table} r JOIN cte c ON r.{relation_column} = c.{relation_column} WHERE r.{condition_column} {condition_value}) SELECT * FROM cte\"\n\n    return sql_query\n\ndef parse_nested_query(parse_tree):\n    root_table = None\n    nested_columns = []\n    conditions = []\n    \n    for token in parse_tree.tokens:\n        if token.ttype == T.Name:\n            if not root_table:\n                root_table = token.value\n            else:\n                nested_columns.append(token.value)\n        elif token.ttype == T.Keyword.WHERE:\n            for condition in parse_tree.get_sub_tree(token, sql.Where):\n                conditions.append(condition.tokens[0].value)\n    \n    return root_table, nested_columns, conditions\n\n# Example usage:\ntext_description = \"Find all employees and their managers recursively from the employees table, joining on the 'manager_id' column, where the employee's hire date is before their manager's hire date.\"\n\nsql_query = natural_to_recursive_sql(text_description)\nprint(sql_query)\n```\nNote: These examples demonstrate a high-level approach to the problem and do not include the complete parsing logic required for a practical Text to SQL system. Implementing a comprehensive solution would involve a more sophisticated natural language processing pipeline and a deep understanding of SQL syntax."}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Math programming", "Complexity_Level": "medium", "Response": "The given JSON does not directly include a \"Code generation (e.g., Text to Code)\" or \"Math programming\" category. However, we can create a scenario combining elements from the \"Programming Language Concepts\" and \"Algorithms\" categories.\n\nQuestion 1:\nGiven a medium difficulty level problem in math programming, write a function in Python that takes a list of numbers and returns the indices of the two numbers that add up to a given target sum.\n\n**Concept:**\n{\"Concept\": \"List Comprehension\", \"Topic\": \"Control\", \"Subcategory\": \"Array\", \"Language\": \"Python\"}\n\n**Problem:**\nGiven an input array of integers `nums` and a target integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you cannot use the same element twice.\n\n**Solution:**\n```python\ndef two_sum(nums, target):\n    indices = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in indices:\n            return [indices[complement], i]\n        indices[num] = i\n    return []\n\n# Example usage\nnums = [2, 7, 11, 15]\ntarget = 9\nprint(two_sum(nums, target))  # Output: [0, 1]\n```\n\nQuestion 2:\nCreate a Python function to compute the mathematical sequence of the Fibonacci series up to a specified number of terms. The user should be able to input the number of terms they want to generate.\n\n**Concept:**\n{\"Concept\": \"Loops\", \"Topic\": \"Control\", \"Subcategory\": \"Array\", \"Language\": \"Python\"}\n\n**Problem:**\nWrite a function `fibonacci(n)` that takes an integer `n` and returns an array containing the first `n` terms of the Fibonacci sequence.\n\n**Solution:**\n```python\ndef fibonacci(n):\n    fib_sequence = [0, 1]\n    while len(fib_sequence) < n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence[:n]\n\n# Example usage\nn = 10\nprint(fibonacci(n))  # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\nBoth questions involve mathematical programming and utilize Python for solving problems using control structures such as loops and list comprehension."}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Math programming", "Complexity_Level": "extremely difficult", "Response": "The concept \"Code generation (e.g., Text to Code)\" isn't directly mentioned in the provided JSON. However, I can create a related problem in the domain of \"Math Programming.\" Assume we want to generate code that can handle complex mathematical operations and generate efficient code for it.\n\nQuestion 1:\nCreate a code generator in Python that takes a symbolic mathematical equation represented as a string and generates C code for an optimized numerical solver using the Limited Memory Broyden-Fletcher-Goldfarb-Shanno (L-BFGS) algorithm to solve the equation for multiple initial guess values.\n\nProblem:\nGiven a mathematical function `f(x) = x^3 - 6x^2 + 9x - 4`, generate C code that, when provided with an array of initial guess values `x0[]`, finds the roots for each initial guess using the L-BFGS algorithm. The generated code should handle memory allocation, function evaluations, and L-BFGS iterations.\n\nSolution in Python (using `sympy` and `cppprint` libraries for symbolic computation and C code generation):\n```python\nimport sympy as sp\nimport cpprint\n\n# Define symbolic variable and function\nx = sp.Symbol('x')\nf = x**3 - 6*x**2 + 9*x - 4\n\n# Generate function for evaluating f(x)\ncpp_f = sp.ccode(f, assign_to='f')\n\n# Define L-BFGS solver template\nlbfgs_solver_template = \"\"\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <lbfgs.h>\n\ndouble objective(double *x, int n, void *ptr) {\n  return {cpp_f};\n}\n\nvoid gradient(double *x, int n, double *g, void *ptr) {\n  g[0] = 3 * x[0] * x[0] - 12 * x[0] + 9;\n}\n\nint main() {\n  int n = 1;\n  int m = 5;\n  double x0[1] = {{initial_guess}};\n  lbfgsdouble_t *x = (lbfgsdouble_t *) malloc(n * sizeof(lbfgsdouble_t));\n  lbfgsdouble_t *g = (lbfgsdouble_t *) malloc(n * sizeof(lbfgsdouble_t));\n  lbfgs_parameter_t param;\n  lbfgs_init(&param);\n  param.m = m;\n  lbfgs(n, x0, x, &objective, &gradient, NULL, &param, NULL);\n\n  printf(\"Solution: %f\\\\n\", x[0]);\n\n  free(x);\n  free(g);\n  return 0;\n}\n\"\"\"\n\n# Function to generate C code for a given initial guess\ndef generate_code(initial_guess):\n    return lbfgs_solver_template.format(cpp_f=cpp_f, initial_guess=initial_guess)\n\n# Example usage\nc_code = generate_code(1.0)\nprint(c_code)\n```\nThis Python script generates C code for a solver using the L-BFGS algorithm to find the root of the given function `f(x)` with a specific initial guess value. The generated code can be compiled and run separately.\n\nQuestion 2:\nDevelop a Java code generator for creating a custom numerical method to solve stiff differential equations with a high-order Runge-Kutta method (e.g., Dormand-Prince 8(5,3)) based on the provided Ordinary Differential Equation (ODE) system.\n\nProblem:\nGiven a system of ODEs in the form of `dy/dt = F(t, y)`, generate Java code that implements a Dormand-Prince 8(5,3) solver to numerically integrate the system over a specified time range with a chosen step size. The generated code should handle error control and adaptive step sizing.\n\nSolution in Java (using `Jython` to generate the code):\n```python\nimport jython_code_generator as jcg\n\ndef generate_dopri853_code(ode_system, initial_conditions, time_range, step_size):\n    # Define Dormand-Prince 8(5,3) method implementation in Java (omitted for brevity)\n    dopri853_template = ...\n\n    # Generate code for ODE system\n    ode_code = jcg.generate_ode_class(ode_system)\n\n    # Combine Dormand-Prince 8(5,3) with ODE code\n    solver_code = dopri853_template.format(ode_class=ode_code)\n\n    # Insert initial conditions, time range, and step size into the code\n    solver_code_with_params = solver_code.format(initial_conditions=initial_conditions,\n                                                 t_start=time_range[0],\n                                                 t_end=time_range[1],\n                                                 h=step_size)\n\n    return solver_code_with_params\n\n# Example usage\node = \"dy1/dt = -y1 + y2; dy2/dt = y1 - y2 - y2*y2\"\nic = \"y1 = 1.0, y2 = 0.0\"\nt_range = (0.0, 10.0)\nh = 0.01\njava_code = generate_dopri853_code(ode, ic, t_range, h)\nprint(java_code)\n```\nThis Jython script generates Java code for solving a given system of ODEs using the Dormand-Prince 8(5,3) method. The generated code can be compiled and run in a Java environment. Note that implementing the Dormand-Prince 8(5,3) method in Java would be a significant task and is not shown here, but it could be done using a well-established numerical library or by writing the method from scratch."}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Code snippets & examples", "Complexity_Level": "medium", "Response": "Since \"Code generation (e.g., Text to Code)\" and \"Code snippets & examples\" are not directly present in the provided JSON, I'll pick a related concept from the \"Programming Language Concepts\" domain and create two medium-difficulty problems.\n\n**Problem 1:**\nConcept: \"Function\"\nLanguage: Python\n\nQuestion: Write a function in Python that takes a list of integers as input and returns a new list containing only the even numbers from the input list, sorted in descending order.\n\n```python\ndef filter_even_numbers(numbers):\n    # Your code here\n    pass\n\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\noutput_list = filter_even_numbers(input_list)\nprint(output_list)  # Expected: [10, 8, 6, 4, 2]\n```\n\nSolution:\n```python\ndef filter_even_numbers(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    even_numbers.sort(reverse=True)\n    return even_numbers\n\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\noutput_list = filter_even_numbers(input_list)\nprint(output_list)  # Output: [10, 8, 6, 4, 2]\n```\n\n**Problem 2:**\nConcept: \"Array\" & \"Control\" (Loops)\nLanguage: JavaScript\n\nQuestion: Write a JavaScript function that takes an array of strings, reverses each string in the array, and returns a new array with the reversed strings. Do not use any built-in array or string reverse functions.\n\n```javascript\nfunction reverseStrings(strings) {\n    // Your code here\n    return reversed_strings;\n}\n\ninput_array = ['hello', 'world', 'example'];\noutput_array = reverseStrings(input_array);\nconsole.log(output_array);  // Expected: ['olleh', 'dlrow', 'elpmaxe']\n```\n\nSolution:\n```javascript\nfunction reverseStrings(strings) {\n    let reversed_strings = [];\n    for (let i = 0; i < strings.length; i++) {\n        let reversed_string = '';\n        for (let j = strings[i].length - 1; j >= 0; j--) {\n            reversed_string += strings[i][j];\n        }\n        reversed_strings.push(reversed_string);\n    }\n    return reversed_strings;\n}\n\ninput_array = ['hello', 'world', 'example'];\noutput_array = reverseStrings(input_array);\nconsole.log(output_array);  // Output: ['olleh', 'dlrow', 'elpmaxe']\n```"}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Code snippets & examples", "Complexity_Level": "extremely difficult", "Response": "Area: \"Code generation (e.g., Text to Code)\"\nSub Area: \"Code snippets & examples\"\n\nQuestion 1: Given a complex mathematical expression specified in natural language, generate executable code in Python that calculates the expression, handles variable assignment, and incorporates error handling for invalid input.\n\nProblem: Develop a Python function called `generate_expression_code` that takes a mathematical expression in English as a string and returns a function that, when executed, calculates the expression. The expression can include variables, arithmetic operations, exponents, and nested parentheses. The function should also handle invalid input by raising a custom exception.\n\nExample input: \"Given a variable x, calculate the expression ((x + 4) * 3) / (x - 2) if x is a number, and throw a 'InvalidInputError' exception otherwise.\"\n\nExample output:\n```python\ndef calculate_expression(x):\n    if not isinstance(x, (int, float)):\n        raise InvalidInputError(\"Invalid input. x must be a number.\")\n    try:\n        result = ((x + 4) * 3) / (x - 2)\n        return result\n    except ZeroDivisionError:\n        raise InvalidInputError(\"Invalid input. Division by zero is not allowed.\")\n```\n\nSolution:\n```python\nclass InvalidInputError(Exception):\n    pass\n\ndef generate_expression_code(expression_text):\n    def calculate_expression(variables):\n        if not all(isinstance(v, (int, float)) for v in variables.values()):\n            raise InvalidInputError(\"Invalid input. All variables must be numbers.\")\n        \n        expression_tree = build_expression_tree(expression_text)  # Assume this function parses and builds the expression tree\n        try:\n            result = evaluate_expression_tree(expression_tree, variables)\n            return result\n        except ZeroDivisionError:\n            raise InvalidInputError(\"Invalid input. Division by zero is not allowed.\")\n    \n    return calculate_expression\n\n# Example usage\nexpression = \"Given a variable x, calculate the expression ((x + 4) * 3) / (x - 2) if x is a number, and throw a 'InvalidInputError' exception otherwise.\"\ncalculate = generate_expression_code(expression)\nresult = calculate({\"x\": 5})  # Returns the result\n# calculate({\"x\": \"invalid\"})  # Raises InvalidInputError\n```\nIn this solution, the `generate_expression_code` function takes a natural language expression and returns an inner function `calculate_expression`, which checks the type of the input variables and calculates the expression based on an expression tree (omitted for brevity). This tree would be built from the parsed expression text.\n\nQuestion 2: Implement a code snippet generation system in TypeScript that converts a JSON schema describing a REST API into a complete Express.js backend with authentication, rate limiting, and database integration using MongoDB.\n\nProblem: Create a TypeScript function `generateExpressBackend` that takes a JSON object representing an API specification, including endpoints, HTTP methods, and their corresponding data models. The generated code should set up an Express.js server, handle authentication using JSON Web Tokens (JWT), rate limit API requests, and integrate with a MongoDB database through Mongoose.\n\nExample input:\n```json\n{\n  \"endpoints\": [\n    {\n      \"path\": \"/users\",\n      \"methods\": [\"POST\", \"GET\", \"PUT\", \"DELETE\"],\n      \"model\": {\n        \"name\": \"User\",\n        \"properties\": {\n          \"id\": \"string\",\n          \"email\": \"string\",\n          \"password\": \"string\"\n        }\n      }\n    }\n  ],\n  \"auth\": {\n    \"strategy\": \"jwt\",\n    \"secret\": \"mysecretkey\"\n  },\n  \"rateLimit\": {\n    \"max\": 100,\n    \"timeWindow\": \"1h\"\n  }\n}\n```\n\nExample output:\n```typescript\nimport express, { Request, Response } from 'express';\nimport jwt from 'jsonwebtoken';\nimport rateLimit from 'express-rate-limit';\nimport mongoose from 'mongoose';\n\nconst app = express();\n\napp.use(express.json());\napp.use(mongoDBConnection());  // Assume this function establishes the MongoDB connection\n\nconst apiLimiter = rateLimit({\n  max: 100,\n  windowMs: 60 * 60 * 1000,  // 1 hour\n});\n\nconst UserSchema = new mongoose.Schema({\n  id: { type: String },\n  email: { type: String },\n  password: { type: String },\n});\n\nconst UserModel = mongoose.model('User', UserSchema);\n\nfunction authenticateToken(req: Request, res: Response, next) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n  if (token == null) return res.sendStatus(401);\n\n  jwt.verify(token, 'mysecretkey', (err, user) => {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n}\n\n// ... Implement endpoints using the given data model, authentication, and rate limiting\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});\n```\n\nSolution:\n```typescript\nimport express, { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport rateLimit from 'express-rate-limit';\nimport mongoose from 'mongoose';\n\ninterface APIEndpoint {\n  path: string;\n  methods: string[];\n  model: {\n    name: string;\n    properties: Record<string, string>;\n  };\n}\n\ninterface APISpec {\n  endpoints: APIEndpoint[];\n  auth: {\n    strategy: 'jwt';\n    secret: string;\n  };\n  rateLimit: {\n    max: number;\n    timeWindow: string;\n  };\n}\n\nfunction mongoDBConnection() {\n  // Omitted for brevity - Establish MongoDB connection\n}\n\nfunction generateMongooseSchema(model: APIEndpoint['model']) {\n  const schema = new mongoose.Schema(model.properties);\n  return schema;\n}\n\nfunction generateModel(model: APIEndpoint['model'], mongooseSchema) {\n  const modelName = model.name;\n  const Model = mongoose.model(modelName, mongooseSchema);\n  return Model;\n}\n\nfunction createAuthMiddleware(spec: APISpec) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    // Authenticate using JWT\n    // ...\n  };\n}\n\nfunction createEndpointHandler(model: APIEndpoint['model'], Model: mongoose.Model<any>) {\n  // Implement endpoint handlers for each method (POST, GET, PUT, DELETE)\n  // ...\n}\n\nfunction generateExpressBackend(spec: APISpec) {\n  const app = express();\n  app.use(express.json());\n  app.use(mongoDBConnection());\n\n  const apiLimiter = rateLimit(spec.rateLimit);\n  app.use(apiLimiter);\n\n  const endpoints = spec.endpoints;\n  for (const endpoint of endpoints) {\n    const mongooseSchema = generateMongooseSchema(endpoint.model);\n    const Model = generateModel(endpoint.model, mongooseSchema);\n    const authMiddleware = createAuthMiddleware(spec);\n\n    endpoint.methods.forEach((method) => {\n      // Generate and attach the appropriate handler for the method and endpoint\n      // ...\n    });\n  }\n\n  app.listen(3000, () => {\n    console.log('Server started on port 3000');\n  });\n}\n\n// Example usage:\nconst apiSpec = {\n  // ... (Given example input)\n};\n\ngenerateExpressBackend(apiSpec);\n```\nIn this solution, the `generateExpressBackend` function takes an API specification and generates an Express.js server with the specified endpoints, authentication, rate limiting, and database integration. The function creates Mongoose schemas, models, and handles authentication for each endpoint based on the provided specification. Note that the actual implementation of endpoint handlers and authentication middleware is left out for brevity, as it would involve a significant amount of code and specific implementation details."}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Plot generation", "Complexity_Level": "medium", "Response": "As a senior expert in code generation and plot generation, I understand that this specific area usually involves converting a textual description or specifications into programming code for generating visual plots or graphs. However, the provided JSON doesn't contain a direct category for \"Code generation (e.g., Text to Code)\" or \"Plot generation\". Instead, we can frame this problem using concepts from the \"Data Science\" and \"Web Development\" categories.\n\nHere are two medium difficulty problems based on plot generation using Python for data visualization:\n\n### Problem 1\n**Concept**: Data Analysis, Visualization (Python, Matplotlib)\n\n**Problem**: Given a dataset with sales data for different products over several months, generate a line plot to compare the sales trends of the top 3 products.\n\n```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Assume data is in a CSV file\ndata = pd.read_csv('sales_data.csv')\n\n# Filter for top 3 products by total sales\ntop_3_products = data.groupby('Product')['Sales'].sum().nlargest(3).index.tolist()\n\n# Extract data for top 3 products\ntop_3_data = data[data['Product'].isin(top_3_products)]\n\n# Plot sales trends\nplt.figure(figsize=(10, 6))\nfor product in top_3_products:\n    product_data = top_3_data[top_3_data['Product'] == product]\n    plt.plot(product_data['Month'], product_data['Sales'], label=product)\n\nplt.title('Top 3 Product Sales Trends')\nplt.xlabel('Month')\nplt.ylabel('Sales')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n### Problem 2\n**Concept**: Web Development, Frontend (HTML/CSS, JavaScript, Plotly.js)\n\n**Problem**: Create an interactive bar chart on a webpage that displays the population of the top 5 countries from a dataset, with a tooltip showing the exact population when hovering over each bar.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>\n</head>\n<body>\n    <div id=\"plot\"></div>\n\n    <script>\n        var data = [\n            {\n                x: ['Country A', 'Country B', 'Country C', 'Country D', 'Country E'],\n                y: [50000000, 45000000, 40000000, 35000000, 30000000],\n                type: 'bar',\n                text: ['50M', '45M', '40M', '35M', '30M'],\n                hovertemplate: '%{text} (<extra>%{y}</extra>)'\n            }\n        ];\n\n        var layout = {\n            title: 'Top 5 Country Populations',\n            xaxis: {title: 'Country'},\n            yaxis: {title: 'Population (in millions)'}\n        };\n\n        Plotly.newPlot('plot', data, layout);\n    </script>\n</body>\n</html>\n```\nBoth of these problems involve generating plots from data, which is a common task in data analysis and visualization. The first problem uses the Python's Matplotlib library for static plotting, while the second problem uses JavaScript and Plotly.js for an interactive web-based chart."}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Plot generation", "Complexity_Level": "extremely difficult", "Response": "The provided JSON does not exactly include a domain for \"Code generation (e.g., Text to Code)\" or \"Plot generation.\" However, we can connect these concepts to \"Data Science\" and \"Programming Language Concepts\" domains. For the purpose of this exercise, we will assume that you want to generate code to create complex, interactive plots from a given textual description. We will use Python and the Plotly library for this.\n\nQuestion 1: Generate code for creating a 3D scatter plot with color-mapped data points, custom light sources, and an interactive legend from a given textual description.\n\n**Input description:**\n\"Create a 3D scatter plot with x, y, z coordinates, where color represents the data intensity. Implement custom light sources to emphasize the depth and include an interactive legend that updates the plot based on data intensity.\"\n\n**Solution:**\n\n```python\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Generate sample data\nnp.random.seed(0)\nx = np.random.randn(500)\ny = np.random.randn(500)\nz = np.random.randn(500)\nintensity = np.sqrt(x**2 + y**2 + z**2)\n\n# Define custom light sources\nlight_1 = dict(azimuth=120, elevation=30)\nlight_2 = dict(azimuth=240, elevation=40)\n\n# Create 3D scatter plot\nfig = go.Figure(data=go.Scatter3d(\n    x=x,\n    y=y,\n    z=z,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color=intensity,            # set color to an array/list of desired values\n        colorscale='Viridis',   # choose a colorscale\n        opacity=0.8,\n        showscale=True\n    )\n))\n\n# Add light sources to the scene\nfig.update_layout(\n    scene=dict(\n        xaxis_title='X',\n        yaxis_title='Y',\n        zaxis_title='Z',\n        lighting=dict(\n            ambient=0.4,\n            fresnel=0.1,\n            roughness=0.7,\n            diffuse=1.0,\n            ambient_light=light_1,\n            direct_light=light_2\n        )\n    )\n)\n\n# Add interactive legend\nfig.update_layout(\n    updatemenus=[dict(\n        type=\"buttons\",\n        showactive=True,\n        buttons=list([\n            dict(\n                args=[{'marker.colorbar.title': 'Intensity'}],\n                label='Intensity',\n                method='restyle'\n            ),\n            dict(\n                args=[{'marker.colorbar.title': ''}],\n                label='Off',\n                method='restyle'\n            )\n        ]),\n        direction='down',\n        pad={'r': 10, 't': 10},\n        showactive=True,\n        x=0.1,\n        xanchor='left',\n        y=1.1,\n        yanchor='top'\n    )]\n)\n\nfig.show()\n```\n\n**Concept: Data Science**\n\nQuestion 2: Generate code that reads an arbitrary textual description of a financial time-series chart with annotations and generates an interactive chart using Highcharts library.\n\n**Input description:**\n\"Create a line chart of stock prices with a 50-day moving average and plot two vertical lines to indicate significant events. Add tooltips for the events and a date range selector.\"\n\n**Solution:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\"></script>\n</head>\n<body>\n<figure class=\"highcharts-figure\">\n    <div id=\"container\"></div>\n    <p class=\"highcharts-description\"></p>\n</figure>\n\n<script>\n    // Sample data\n    const data = [\n        // ...\n    ];\n\n    // Calculate 50-day moving average\n    const movingAverage = calculateMovingAverage(data, 50);\n\n    function calculateMovingAverage(series, period) {\n        const averages = [];\n        for (let i = period - 1; i < series.length; i++) {\n            let sum = 0;\n            for (let j = 0; j < period; j++) {\n                sum += series[i - j];\n            }\n            averages.push(sum / period);\n        }\n        return averages;\n    }\n\n    // Event dates and tooltips\n    const eventDates = [\n        {\n            date: '2021-05-01',\n            tooltip: 'Event 1'\n        },\n        {\n            date: '2021-06-15',\n            tooltip: 'Event 2'\n        }\n    ];\n\n    // Highcharts configuration\n    Highcharts.chart('container', {\n        chart: {\n            zoomType: 'x'\n        },\n        title: {\n            text: 'Stock Prices with 50-day Moving Average'\n        },\n        subtitle: {\n            text: 'With event annotations and date range selector'\n        },\n        xAxis: {\n            type: 'datetime',\n            events: {\n                setExtremes: function(e) {\n                    this.setTitle({ text: 'Range: ' + Highcharts.dateFormat('%Y-%m-%d', e.min) + ' to ' + Highcharts.dateFormat('%Y-%m-%d', e.max) });\n                }\n            }\n        },\n        yAxis: {\n            title: {\n                text: 'Price'\n            }\n        },\n        legend: {\n            enabled: false\n        },\n        tooltip: {\n            shared: true\n        },\n        plotOptions: {\n            series: {\n                marker: {\n                    enabled: false\n                }\n            }\n        },\n        series: [{\n            name: 'Stock Prices',\n            data: data\n        }, {\n            name: '50-day Moving Average',\n            data: movingAverage,\n            type: 'spline',\n            color: 'red'\n        }],\n        annotations: eventDates.map(event => ({\n            labels: [{\n                point: {\n                    x: Date.parse(event.date),\n                    y: 0\n                },\n                text: event.tooltip,\n                backgroundColor: 'white',\n                borderColor: 'gray',\n                borderRadius: 5,\n                borderWidth: 1,\n                padding: 5\n            }],\n            shapes: [{\n                type: 'line',\n                type: 'rect',\n                x: Date.parse(event.date),\n                y: 0,\n                x2: Date.parse(event.date),\n                y2: 100,\n                strokeWidth: 2,\n                stroke: 'blue',\n                fill: 'none'\n            }]\n        })),\n        exporting: {\n            enabled: false\n        },\n        accessibility: {\n            enabled: true\n        }\n    });\n</script>\n</body>\n</html>\n```\n\n**Concept: Programming Language Concepts**"}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Generating bash commands", "Complexity_Level": "medium", "Response": "Area: \"Code generation (e.g., Text to Code)\"\nSub Area: \"Generating bash commands\"\n\n**Question 1:**\nCreate a medium-complexity problem where a user wants to automate the process of backing up their files from one directory to another, compressing the backup, and adding a timestamp to the file name. The source directory is `/home/user/documents` and the target directory for backups is `/home/user/backups`.\n\n**Solution:**\n```bash\n#!/bin/bash\n\n# Set variables\nSOURCE_DIR=\"/home/user/documents\"\nTARGET_DIR=\"/home/user/backups\"\nBACKUP_NAME=\"backup_$(date +%Y-%m-%d_%H-%M-%S).tar.gz\"\n\n# Create a tar archive with compression\ntar -czvf \"$TARGET_DIR/$BACKUP_NAME\" -C \"$SOURCE_DIR\" .\n\n# Check if the backup file was created successfully\nif [ $? -eq 0 ]; then\n    echo \"Backup $BACKUP_NAME created successfully.\"\nelse\n    echo \"Error creating backup.\"\nfi\n```\nConcept: Bash scripting, File manipulation, Date formatting, Conditional statements\n\n**Question 2:**\nA user needs to monitor a log file `/var/log/application.log` for specific error messages, send an email notification when an error occurs, and keep track of the number of errors in a separate file `/home/user/error_count.txt`.\n\n**Solution:**\n```bash\n#!/bin/bash\n\n# Set variables\nLOG_FILE=\"/var/log/application.log\"\nERROR_FILE=\"/home/user/error_count.txt\"\nEMAIL=\"user@example.com\"\nERROR_PATTERN=\"ERROR|Failure\"\n\n# Check if error log file exists\nif [ ! -f \"$LOG_FILE\" ]; then\n    echo \"Log file $LOG_FILE not found.\"\n    exit 1\nfi\n\n# Initialize error counter\nERROR_COUNT=$(grep -c \"$ERROR_PATTERN\" \"$LOG_FILE\" || echo 0)\n\n# Update error count file\necho $ERROR_COUNT > \"$ERROR_FILE\"\n\n# Send email if there are errors\nif [ $ERROR_COUNT -gt 0 ]; then\n    echo \"Error count: $ERROR_COUNT\" | mail -s \"Application Error Report\" \"$EMAIL\"\nfi\n\n# Print current error count\necho \"Current error count: $ERROR_COUNT\"\n```\nConcept: Bash scripting, File I/O, Pattern matching, Conditional statements, Command substitution, Email notification"}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Generating bash commands", "Complexity_Level": "extremely difficult", "Response": "Question 1: Generate a Bash script that, given a list of directory paths stored in an array, recursively finds all text files (.txt) containing a specified keyword (case-insensitive), prints the line numbers containing the keyword, and archives the matching files into a compressed tarball with a timestamped name.\n\n**Concept:** Bash Scripting\n\n```bash\n#!/bin/bash\n\n# Directory paths\ndirectories=(\"path1\" \"path2\" \"path3\")\n\n# Keyword to search for\nkeyword=\"example\"\n\n# Timestamp for the archive\ntimestamp=$(date +%Y%m%d%H%M%S)\n\n# Create a function to find and archive files\nfind_and_archive() {\n  for dir in \"${directories[@]}\"; do\n    find \"$dir\" -type f -name \"*.txt\" -exec grep -nH -i \"$keyword\" {} + | tee -a search_results.txt\n    grep -lri \"$keyword\" \"$dir\"/*.txt | xargs -I {} tar --create --file=\"archives/text_files_${timestamp}.tar.gz\" --transform=\"s,./,,\" {}\n  done\n}\n\n# Execute the function\nfind_and_archive\n\n# Print summary\necho \"Search completed. Results are in search_results.txt\"\necho \"Archived files are in archives/text_files_${timestamp}.tar.gz\"\n```\n\nQuestion 2: Develop a Bash script that reads a CSV file with two columns (IP addresses and domain names) and generates a set of commands to perform a DNS lookup for each domain, then saves the resolved IP addresses to a new CSV file, along with the original domain names, handling large datasets efficiently.\n\n**Concept:** Bash Scripting, CSV Processing, DNS Lookups\n\n```bash\n#!/bin/bash\n\n# Input CSV file\ninput_file=\"domains.csv\"\n# Output CSV file\noutput_file=\"resolved_domains.csv\"\n\n# Temp file for storing resolved IPs\ntemp_file=$(mktemp)\n\n# Read CSV and perform DNS lookups\nwhile IFS=',' read -r ip domain; do\n  echo \"$domain,$ip\" >> \"$temp_file\"\n  if host -t A \"$domain\" | grep -q -oE \"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\"; then\n    resolved_ip=$(host -t A \"$domain\" | grep -oE \"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\")\n    echo \"$domain,$resolved_ip\" >> \"$output_file\"\n  fi\ndone < \"$input_file\"\n\n# Clean up temp file\nrm \"$temp_file\"\n\necho \"DNS lookups completed. Results are in $output_file\"\n```\n\nNote: These scripts assume that the input CSV files have the correct format and that the system has the necessary permissions and tools (e.g., `grep`, `find`, `tar`, `host`) installed. The scripts are for illustration purposes and may require modifications based on specific use cases and environments."}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Database query generation", "Complexity_Level": "medium", "Response": "\"Code generation\" is not explicitly mentioned in the provided JSON, but it can be related to the \"Database Management\" category. I will create a medium complexity problem and solution for generating a database query given a specific text input.\n\n**Problem:**\nGiven a text input describing a database query, generate the corresponding SQL query for a relational database. The input text should contain table names, column names, conditions, and join operations.\n\n**Example Input:**\n\"Select the names and salaries of employees who work in the 'Sales' department and have a salary greater than 50,000. Include employees from the 'Engineering' department as well.\"\n\n**Concept: Relational Databases**\n\n**Solution:**\nIn this problem, the solution would involve parsing the input text, identifying key components like tables, columns, conditions, and joins, and then constructing a corresponding SQL query.\n\nHere's a Python function that demonstrates how this can be done:\n\n```python\ndef generate_sql_query(text):\n    def extract_words_starting_with(word_prefix):\n        return [word for word in text.split() if word.startswith(word_prefix)]\n\n    tables = extract_words_starting_with('from ')\n    columns = extract_words_starting_with('select ')\n    conditions = extract_words_starting_with('where ')\n    join_conditions = extract_words_starting_with('join ')\n    \n    # Simplified parsing for this example\n    table_names = [word.strip(',') for word in tables[0].split(',') if word.strip(',')]\n    column_names = [word.strip(',') for word in columns[0].split(',') if word.strip(',')]\n    condition_parts = [word.strip(',') for word in conditions[0].split(',') if word.strip(',')]\n    join_parts = [word.strip(',') for word in join_conditions[0].split(',') if word.strip(',')]\n\n    conditions_str = ' AND '.join([f\"{table}.`{word}`\" for word in condition_parts])\n    join_str = ' JOIN '.join(join_parts)\n\n    # Construct the SQL query\n    sql_query = f\"SELECT {', '.join(column_names)} FROM {', '.join(table_names)} {join_str} WHERE {conditions_str}\"\n    \n    return sql_query\n\ntext = \"Select the names and salaries of employees who work in the 'Sales' department and have a salary greater than 50,000. Include employees from the 'Engineering' department as well.\"\nprint(generate_sql_query(text))\n```\n\nThis function would output a SQL query like this:\n\n```sql\nSELECT names, salaries FROM employees JOIN departments WHERE departments.name = 'Sales' AND employees.salary > 50000\n```\n\nPlease note that this is a simplified example, and in practice, a more robust natural language processing (NLP) or rule-based system would be required to handle the complexity and variability of natural language inputs."}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Database query generation", "Complexity_Level": "extremely difficult", "Response": "\"Code generation (e.g., Text to Code)\" is not explicitly mentioned in the provided JSON, but we can infer a relevant concept from the \"Database Management\" domain. The problem we'll create will involve generating complex SQL queries from natural language descriptions.\n\nProblem 1: Given a complex natural language description, generate a SQL query to fetch specific data from a relational database.\nDescription: Retrieve the names of customers who have made at least 3 orders in the past month, with each order containing at least 2 distinct products and the total order value exceeding $150.\n\n```sql\nSELECT c.customer_name\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN order_details od ON o.order_id = od.order_id\nJOIN products p ON od.product_id = p.product_id\nWHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY c.customer_id\nHAVING COUNT(DISTINCT od.product_id) >= 2\nAND SUM(od.quantity * p.price) > 150\nHAVING COUNT(o.order_id) >= 3;\n```\n\nProblem 2: Generate a SQL query to find the top 5 most popular categories in the past year, based on the number of distinct products sold, while excluding categories with less than 10 distinct products.\n\n```sql\nWITH category_product_stats AS (\n  SELECT c.category_id, COUNT(DISTINCT p.product_id) AS product_count\n  FROM categories c\n  JOIN products p ON c.category_id = p.category_id\n  JOIN orders o ON p.product_id IN (\n    SELECT product_id FROM order_details WHERE order_id IN (\n      SELECT order_id FROM orders WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\n    )\n  )\n  GROUP BY c.category_id\n  HAVING COUNT(DISTINCT p.product_id) >= 10\n)\nSELECT c.category_name, cps.product_count\nFROM category_product_stats cps\nJOIN categories c ON cps.category_id = c.category_id\nORDER BY cps.product_count DESC\nLIMIT 5;\n```\n\nThese SQL queries demonstrate the generation of complex database queries based on natural language descriptions, utilizing joins, subqueries, window functions, and aggregate operations."}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "UI code generation", "Complexity_Level": "medium", "Response": "Question 1:\nProblem: Given a JSON object containing data for a simple dashboard, generate the HTML and CSS code to display a responsive card-based layout with each card containing the data. The JSON should have an array of \"cards\" with properties like \"title\", \"description\", and \"imageURL\".\n\n```json\n{\n  \"cards\": [\n    {\n      \"title\": \"Card 1\",\n      \"description\": \"This is the description for Card 1.\",\n      \"imageURL\": \"https://example.com/image1.jpg\"\n    },\n    {\n      \"title\": \"Card 2\",\n      \"description\": \"This is the description for Card 2.\",\n      \"imageURL\": \"https://example.com/image2.jpg\"\n    }\n  ]\n}\n```\nSolution (HTML + CSS in JavaScript):\n\n```javascript\n// Given JSON data\nconst dashboardData = {\n  // ... JSON object provided\n};\n\n// Generate HTML and CSS\nconst html = `\n  <style>\n    .card-container {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 1rem;\n    }\n    .card {\n      flex: 1 0 calc(33.33% - 2rem);\n      text-align: center;\n      padding: 1rem;\n      box-sizing: border-box;\n    }\n    .card img {\n      width: 100%;\n      height: auto;\n      margin-bottom: 1rem;\n    }\n  </style>\n  <div class=\"card-container\">\n    ${dashboardData.cards.map(card => `\n      <div class=\"card\">\n        <img src=\"${card.imageURL}\" alt=\"${card.title}\">\n        <h2>${card.title}</h2>\n        <p>${card.description}</p>\n      </div>\n    `).join('')}\n  </div>\n`;\n\n// Write to the DOM or return the HTML and CSS strings for further use\ndocument.getElementById('dashboard').innerHTML = html;\n```\n\nQuestion 2:\nProblem: Given a set of specifications for a table (e.g., column names, data types, and initial data) as a JavaScript object, generate the necessary HTML, CSS, and JavaScript code to create an interactive data table with sorting functionality.\n\n```javascript\nconst tableSpecs = {\n  columnNames: ['Name', 'Age', 'Email'],\n  columnTypes: ['string', 'number', 'string'],\n  initialData: [\n    ['John Doe', 35, 'john@example.com'],\n    ['Jane Smith', 28, 'jane@example.com'],\n    ['Bob Johnson', 42, 'bob@example.com']\n  ]\n};\n```\nSolution (HTML, CSS, and JavaScript):\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    table {\n      width: 100%;\n      border-collapse: collapse;\n    }\n    th, td {\n      border: 1px solid #ddd;\n      padding: 8px;\n      text-align: left;\n    }\n    th {\n      cursor: pointer;\n    }\n  </style>\n</head>\n<body>\n  <table id=\"data-table\"></table>\n\n  <script>\n    // Given table specifications\n    const tableSpecs = {\n      // ... tableSpecs object provided\n    };\n\n    // Generate table HTML\n    const table = document.createElement('table');\n    const thead = document.createElement('thead');\n    const tbody = document.createElement('tbody');\n    tableSpecs.columnHeaderNames.forEach(name => {\n      const th = document.createElement('th');\n      th.textContent = name;\n      th.onclick = () => sortTable(name, tableSpecs.columnHeaderTypes[tableSpecs.columnHeaderNames.indexOf(name)]);\n      thead.appendChild(th);\n    });\n    tableSpecs.initialData.forEach(row => {\n      const tr = document.createElement('tr');\n      row.forEach(data => {\n        const td = document.createElement('td');\n        td.textContent = data;\n        tr.appendChild(td);\n      });\n      tbody.appendChild(tr);\n    });\n    table.appendChild(thead);\n    table.appendChild(tbody);\n    document.getElementById('data-table').appendChild(table);\n\n    // Sorting function\n    function sortTable(column, dataType) {\n      let order = 1;\n      if (column.includes('-')) {\n        order = -1;\n        column = column.replace('-', '');\n      }\n      table.rows .slice(1)\n        .sort((a, b) => {\n          const x = a.cells[column].innerText;\n          const y = b.cells[column].innerText;\n          if (dataType === 'number') {\n            return parseInt(x, 10) - parseInt(y, 10) * order;\n          } else {\n            return x.localeCompare(y) * order;\n          }\n        })\n        .forEach(row => tbody.appendChild(row));\n    }\n  </script>\n</body>\n</html>\n```\nIn both solutions, the \"Concept\" used is \"Code generation\"."}]