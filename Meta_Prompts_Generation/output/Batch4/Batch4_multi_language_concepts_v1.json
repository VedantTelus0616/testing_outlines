[{"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Code synthesis", "Complexity_Level": "extremely difficult", "Question": "Given a complex natural language description of a web application involving user authentication, database interactions, and real-time updates, synthesize the code for a server-side API in Node.js using Express, with authentication handled by JWT, database connection with Postgres, and real-time updates via WebSockets.", "Solution": "```javascript\nconst express = require('express');\nconst jwt = require('jsonwebtoken');\nconst { Pool } = require('pg');\nconst WebSocket = require('ws');\n\nconst app = express();\napp.use(express.json());\n\nconst pool = new Pool({\n  user: 'youruser',\n  host: 'localhost',\n  database: 'yourdatabase',\n  password: 'yourpassword',\n  port: 5432,\n});\n\nconst wss = new WebSocket.Server({ noServer: true });\n\nwss.on('connection', (ws) => {\n  ws.on('message', async (message) => {\n    try {\n      const { userId, action } = JSON.parse(message);\n      // Assuming action can be 'login', 'logout', or 'update'\n      if (action === 'login') {\n        const token = jwt.sign({ userId }, 'yoursecretkey', { expiresIn: '1h' });\n        ws.send(JSON.stringify({ status: 'success', token }));\n      } else if (action === 'logout') {\n        // Handle logout logic\n      } else if (action === 'update') {\n        // Handle real-time update logic\n      }\n    } catch (error) {\n      ws.send(JSON.stringify({ status: 'error', message: error.message }));\n    }\n  });\n\n  // Send real-time updates to connected clients\n  pool.query('SELECT * FROM updates WHERE userId = $1', [userId], (err, res) => {\n    if (err) throw err;\n    wss.clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify(res.rows));\n      }\n    });\n  });\n});\n\napp.post('/login', async (req, res) => {\n  const { username, password } = req.body;\n  // Validate credentials\n  const user = await pool.query('SELECT * FROM users WHERE username = $1 AND password = $2', [username, password]);\n  if (!user.rows.length) {\n    return res.status(401).json({ message: 'Invalid credentials' });\n  }\n  const token = jwt.sign({ userId: user.rows[0].id }, 'yoursecretkey', { expiresIn: '1h' });\n  res.json({ status: 'success', token });\n});\n\n// Add routes for registering users, accessing protected resources, etc.\n\nconst server = app.listen(3000, () => {\n  console.log('Server started on port 3000');\n});\n\nserver.on('upgrade', (req, socket, head) => {\n  wss.handleUpgrade(req, socket, head, (ws) => {\n    wss.emit('connection', ws, req);\n  });\n});\n```\n", "Concept": "Code synthesis"}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Text to SQL", "Complexity_Level": "medium", "Question": "Given a dataset of customer orders with attributes like 'CustomerName', 'OrderDate', and 'TotalAmount', write a SQL query to retrieve the top 5 customers with the highest total order amount from the last year.", "Solution": "```sql\nSELECT CustomerName, SUM(TotalAmount) AS TotalOrderAmount\nFROM Orders\nWHERE OrderDate >= DATEADD(year, -1, GETDATE())\nGROUP BY CustomerName\nORDER BY TotalOrderAmount DESC\nLIMIT 5;\n```", "Concept": "Text to SQL"}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Text to SQL", "Complexity_Level": "extremely difficult", "Question": "Given a complex business requirement to generate an SQL query that can perform a multi-table join with aggregate functions, filtering, and grouping based on user input, create a Text to SQL system that translates the following description into a valid SQL query: 'Find the total revenue generated by each customer in the 'sales' table, join it with the 'customers' table using the customer ID, filter out customers who haven't made any purchases in the last 365 days, and group the results by customer name. Also, sort the output in descending order of the total revenue'", "Solution": "```sql\nWITH recent_sales AS (\n  SELECT customer_id, sale_date, sale_amount\n  FROM sales\n  WHERE sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 365 DAY)\n)\nSELECT customers.customer_name, SUM(sales.sale_amount) AS total_revenue\nFROM recent_sales\nJOIN customers ON recent_sales.customer_id = customers.customer_id\nGROUP BY customers.customer_name\nORDER BY total_revenue DESC;\n```", "Concept": "Text to SQL"}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Math programming", "Complexity_Level": "medium", "Question": "Given a list of integers, write a function that calculates and returns the sum of all even numbers in the list using list comprehension.", "Solution": "```python\ndef sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)\n\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = sum_even_numbers(input_list)\nprint(result)  # Output: 30\n```", "Concept": "List Comprehension"}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Plot generation", "Complexity_Level": "medium", "Question": "Given a dataset of sales figures for a company's different products over the last year, generate a code snippet to create a bar chart visualizing the total sales of each product.", "Solution": "```python\nimport matplotlib.pyplot as plt\n\n# Sales data for different products\nproduct_sales = {'Product A': 15000, 'Product B': 20000, 'Product C': 10000, 'Product D': 17500, 'Product E': 12500}\n\n# Create bar chart\nplt.bar(product_sales.keys(), product_sales.values())\nplt.xlabel('Products')\nplt.ylabel('Total Sales')\nplt.title('Sales Distribution by Product')\nplt.xticks(rotation=45)\nplt.show()\n```", "Concept": "Plot generation"}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Generating bash commands", "Complexity_Level": "medium", "Question": "Given a directory path, generate a bash command to find all files with a '.txt' extension and print their full paths.", "Solution": "```bash\nfind /path/to/directory -type f -name '*.txt'\n```", "Concept": "File search in a directory structure using Bash"}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Database query generation", "Complexity_Level": "medium", "Question": "Given a JSON object representing a collection of employees with their respective details like `id`, `firstName`, `lastName`, and `department`, generate a SQL query to retrieve all employees from the 'HR' department.", "Solution": "```sql\nSELECT id, firstName, lastName\nFROM employees\nWHERE department = 'HR';\n```\n", "Concept": "Database query generation"}, {"L2_TASK": "Code generation (e.g., Text to Code)", "L3_TASK": "Database query generation", "Complexity_Level": "extremely difficult", "Question": "Given a complex JSON document representing a database of sales transactions with nested data structures, generate a SQL query that retrieves the top 5 customers by total purchase amount, excluding any transactions with a status of 'canceled', 'refunded', or 'pending'. The query should also consider different currencies and convert them to USD using the provided exchange rates.", "Solution": "```sql\nWITH converted_transactions AS (\n  SELECT\n    customer_id,\n    SUM(CASE \n          WHEN currency = 'USD' THEN amount\n          ELSE amount * exchange_rates.exchange_rate\n        END) AS total_amount\n  FROM sales_transactions\n  JOIN exchange_rates ON sales_transactions.currency = exchange_rates.currency\n  WHERE transaction_status NOT IN ('canceled', 'refunded', 'pending')\n  GROUP BY customer_id\n)\nSELECT\n  customer_id,\n  total_amount\nFROM converted_transactions\nORDER BY total_amount DESC\nLIMIT 5;\n```", "Concept": "Database query generation"}]